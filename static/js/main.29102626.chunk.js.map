{"version":3,"sources":["components/Home.js","components/Help.js","Routes.js","components/AppNav.js","components/App.js","serviceWorker.js","index.js"],"names":["Home","React","Component","Help","Routes","path","sidebarName","navbarName","icon","HomeTwoTone","component","HelpOutlineTwoTone","AppNav","props","activeRoute","bind","routeName","this","location","pathname","Fragment","AppBar","position","className","classes","appBar","Toolbar","Typography","variant","noWrap","Drawer","drawer","paper","drawerPaper","drawerContainer","MenuList","routes","map","prop","key","to","style","textDecoration","MenuItem","selected","ListItemIcon","ListItemText","primary","withRouter","useStyles","makeStyles","theme","root","display","zIndex","width","flexShrink","overflow","content","flexGrow","padding","spacing","App","CssBaseline","routeInfo","console","log","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8VAWeA,E,uKANP,OACI,+C,GAHOC,IAAMC,WCQVC,E,uKANP,OACI,+C,GAHOF,IAAMC,WCkBVE,EAjBA,CACb,CACEC,KAAM,IACNC,YAAa,OACbC,WAAY,OACZC,KAAMC,IACNC,UAAWV,GAEb,CACEK,KAAM,QACNC,YAAa,OACbC,WAAY,OACZC,KAAMG,IACND,UAAWP,ICHTS,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,YAAc,EAAKA,YAAYC,KAAjB,gBAHJ,E,wDAMPC,GACR,OAAOC,KAAKJ,MAAMK,SAASC,WAAaH,I,+BAGnC,IAAD,OACJ,OACI,kBAAC,IAAMI,SAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQC,UAAWN,KAAKJ,MAAMW,QAAQC,QACnD,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAA/B,2BAKJ,kBAACC,EAAA,EAAD,CACIP,UAAWN,KAAKJ,MAAMW,QAAQO,OAC9BH,QAAQ,YACRJ,QAAS,CACLQ,MAAOf,KAAKJ,MAAMW,QAAQS,cAG9B,kBAACP,EAAA,EAAD,MACA,yBAAKH,UAAWN,KAAKJ,MAAMW,QAAQU,iBAC/B,kBAACC,EAAA,EAAD,KACKC,EAAOC,KAAI,SAACC,EAAMC,GACf,OACI,kBAAC,IAAD,CAAMC,GAAIF,EAAKjC,KAAMoC,MAAO,CAAEC,eAAgB,QAAUH,IAAKA,GAC7D,kBAACI,EAAA,EAAD,CAAUC,SAAU,EAAK9B,YAAYwB,EAAKjC,OACtC,kBAACwC,EAAA,EAAD,KACI,kBAACP,EAAK9B,KAAN,OAEJ,kBAACsC,EAAA,EAAD,CAAcC,QAAST,EAAKhC,2B,GAtC/CL,IAAMC,WAmDZ8C,cAAWpC,GCtDpBqC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEX5B,OAAQ,CACN6B,OAAQH,EAAMG,OAAOvB,OAAS,GAEhCA,OAAQ,CACNwB,MAVgB,IAWhBC,WAAY,GAEdvB,YAAa,CACXsB,MAdgB,KAgBlBrB,gBAAiB,CACfuB,SAAU,QAEZC,QAAS,CACPC,SAAU,EACVC,QAAST,EAAMU,QAAQ,QAIZ,SAASC,IACtB,IAAMtC,EAAUyB,IAEhB,OACE,kBAAC,IAAD,KACE,yBAAK1B,UAAWC,EAAQ4B,MACtB,kBAACW,EAAA,EAAD,MACA,kBAAC,EAAD,CAAQvC,QAASA,IACjB,0BAAMD,UAAWC,EAAQkC,SACvB,kBAAChC,EAAA,EAAD,MACA,kBAAC,IAAD,KACGU,EAAOC,KAAI,SAAC2B,EAAWzB,GAGtB,OAFA0B,QAAQC,IAAI,QAASF,EAAU3D,MAC/B4D,QAAQC,IAAI,OAAQF,EAAUtD,WAE5B,kBAAC,IAAD,CACEyD,OAAK,EACL9D,KAAM2D,EAAU3D,KAChBK,UAAWsD,EAAUtD,UACrB6B,IAAKA,WCzCH6B,QACW,cAA7BC,OAAOnD,SAASoD,UAEe,UAA7BD,OAAOnD,SAASoD,UAEhBD,OAAOnD,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACZ,EAAD,OAEFa,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.29102626.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Home extends React.Component {\r\n    render(){\r\n        return(\r\n            <p>this is home</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\n\r\nclass Help extends React.Component {\r\n    render(){\r\n        return(\r\n            <p>this is Help</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Help;","import { HelpOutlineTwoTone, HomeTwoTone } from '@material-ui/icons';\nimport Home from './components/Home';\nimport Help from './components/Help';\n\nconst Routes = [\n  {\n    path: '/',\n    sidebarName: 'Home',\n    navbarName: 'Home',\n    icon: HomeTwoTone,\n    component: Home,\n  },\n  {\n    path: '/help',\n    sidebarName: 'Help',\n    navbarName: 'Help',\n    icon: HelpOutlineTwoTone,\n    component: Help,\n  },\n];\n\nexport default Routes;\n","import React from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n// import Divider from '@material-ui/core/Divider';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {withRouter,Link} from 'react-router-dom';\r\nimport routes from '../Routes';\r\n\r\n\r\nclass AppNav extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.activeRoute = this.activeRoute.bind(this);\r\n    }\r\n    \r\n    activeRoute(routeName) {\r\n        return this.props.location.pathname === routeName ? true : false;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <React.Fragment>\r\n                <AppBar position=\"fixed\" className={this.props.classes.appBar}>\r\n                    <Toolbar>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        Brandon's Application\r\n                    </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    className={this.props.classes.drawer}\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: this.props.classes.drawerPaper,\r\n                    }}\r\n                    >\r\n                    <Toolbar />\r\n                    <div className={this.props.classes.drawerContainer}>\r\n                        <MenuList>\r\n                            {routes.map((prop, key) => {\r\n                                return (\r\n                                    <Link to={prop.path} style={{ textDecoration: 'none' }} key={key}>\r\n                                    <MenuItem selected={this.activeRoute(prop.path)}>\r\n                                        <ListItemIcon>\r\n                                            <prop.icon />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary={prop.sidebarName} />\r\n                                    </MenuItem>\r\n                                    </Link>\r\n                                );\r\n                            })}\r\n                        </MenuList>\r\n                    </div>\r\n                </Drawer>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(AppNav);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\nimport AppNav from './AppNav';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport routes from '../Routes';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerContainer: {\n    overflow: 'auto',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default function App() {\n  const classes = useStyles();\n\n  return (\n    <Router>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppNav classes={classes} />\n        <main className={classes.content}>\n          <Toolbar />\n          <Switch>\n            {routes.map((routeInfo, key) => {\n              console.log('route', routeInfo.path);\n              console.log('comp', routeInfo.component);\n              return (\n                <Route\n                  exact\n                  path={routeInfo.path}\n                  component={routeInfo.component}\n                  key={key}\n                />\n              );\n            })}\n            {/* <Route path='/help'>\n                        <Typography paragraph>\n                            Help Page!\n                        </Typography>\n                    </Route>\n                    <Route path='/'>\n                        <Typography paragraph>\n                            Home Page!\n                        </Typography>\n                    </Route> */}\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'fontsource-roboto';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}